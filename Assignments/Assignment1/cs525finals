<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="X-UA-Compatible" content="chrome=1" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var a=window,b="start";var e=function(d){this.t={};this.tick=function(d,k,c){c=void 0!=c?c:(new Date).getTime();this.t[d]=[c,k]};this.tick(b,null,d)},f=new e;a.jstiming={Timer:e,load:f};if(a.performance&&a.performance.timing){var g=a.performance.timing,h=a.jstiming.load,i=g.navigationStart,j=g.responseStart;0<i&&j>=i&&(h.tick("_wtsrt",void 0,i),h.tick("wtsrt_","_wtsrt",j))}
try{var l=null;a.chrome&&a.chrome.csi&&(l=Math.floor(a.chrome.csi().pageT));null==l&&a.gtbExternal&&(l=a.gtbExternal.pageT());null==l&&a.external&&(l=a.external.pageT);l&&(a.jstiming.pt=l)}catch(m){}; })()
</script>
<link rel="shortcut icon" type="image/x-icon" href="//www.google.com/images/icons/product/sites-16.ico" />
<link rel="apple-touch-icon" href="https://ssl.gstatic.com/sites/p/2b5625/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var d=window,e="length",h="",i="__duration__",j="function";function k(c){return document.getElementById(c)}d.byId=k;function l(c){return c.replace(/^\s+|\s+$/g,h)}d.trim=l;var m=[],n=0;d.JOT_addListener=function(c,a,b){var f=new String(n++),c={eventName:c,handler:a,compId:b,key:f};m.push(c);return f};d.JOT_removeListenerByKey=function(c){for(var a=0;a<m[e];a++)if(m[a].key==c){m.splice(a,1);break}};d.JOT_removeAllListenersForName=function(c){for(var a=0;a<m[e];a++)m[a].eventName==c&&m.splice(a,1)};
d.JOT_postEvent=function(c,a,b){var f={eventName:c,eventSrc:a||{},payload:b||{}};if(d.JOT_fullyLoaded){a=m[e];for(b=0;b<a&&b<m[e];b++){var g=m[b];g&&g.eventName==c&&(f.listenerCompId=g.compId||h,(g=typeof g.handler==j?g.handler:d[g.handler])&&g(f))}}else d.JOT_delayedEvents.push({eventName:c,eventSrc:a,payload:b})};d.JOT_delayedEvents=[];d.JOT_fullyLoaded=!1;
d.JOT_formatRelativeToNow=function(c,a){var b=((new Date).getTime()-c)/6E4;if(1440<=b||0>b)return null;var f=0;60<=b&&(b/=60,f=2);2<=b&&f++;return a?d.JOT_siteRelTimeStrs[f].replace(i,Math.floor(b)):d.JOT_userRelTimeStrs[f].replace(i,Math.floor(b))}; })()
</script>
<script>


var webspace = {"scottyUrl":"/_/upload","isConsumer":true,"canPublishScriptToAnyone":true,"serverFlags":{"cajaBaseUrl":"//www.gstatic.com/caja","cajaDebugMode":false},"sharingUrlPrefix":"/_/sharing","csiReportUri":"https://gg.google.com/csi","sharingPolicy":"OPENED","analyticsAccountId":"","baseUri":"/site/rommelbhargava","name":"rommelbhargava","domain":"defaultdomain","features":{"scottyForTrogImageUpload":false,"pdfEmbedSupport":false,"docosCommenting":false,"useStandardEmbedsInSidebar":false,"siteChromeSidebarWidgetsEditDialog":false,"canonicalLinkTagInHead":false,"siteChromeSystemFooterDialog":false,"plusOneButtonOptions":true,"plusOneButton":true,"spreadsheetsEmbedLoadRedirect":true,"ieSevenUnsupportedError":false,"photoAlbumsInOnePick":true,"siteChromeSidebarWidgetsDialog":false,"autoCompleteSearch":false,"goocitiesTheme":false,"editorKeyboardShortcuts":true,"experimental":{"displayEditorLockExceptions":false},"siteChromeDialogsToolbar":false,"plusBadge":false,"siteChromeHorizontalNavigationDialog":false,"dataPropsForEmbeds":true,"autoAdjustSitemapSearchDepth":true,"siteChromeSidebarDialog":false,"htmlEmbed":true,"keyboardShortcuts":true,"siteChromeHeaderDialog":false,"stBtiWebspaceTitleSearch":false,"pageRedirects":false,"siteChromeCustomFooterDialog":false},"adsensePublisherId":null,"gvizVersion":1,"siteTitle":"rommelbhargava","pageSharingId":"jotspot_page","plusPageId":"","termsUrl":"http://www.google.com/sites/help/intl/en/terms.html","enableAnalytics":false,"isPublic":true,"plusPageUrl":"","homePath":"/","sharingId":"jotspot","isGoocities":false,"isAdsenseEnabled":true,"adsensePromoClickedOrSiteIneligible":true,"enableAutoComplete":true,"isStartPageEnabled":false,"domainAnalyticsAccountId":""};



webspace.gadgets = {"isGadgetDirectoryEnabled":true,"baseUri":"/site/rommelbhargava/system/app/pages/gadgets","isGgsRenderingEnabled":true};


webspace.user = {"uid":"","renderMobile":false,"primaryEmail":"guest","sessionIndex":"","namespaceUser":false,"displayNameOrEmail":"guest","namespace":"","hasAdminAccess":false,"guest_":true,"keyboardShortcuts":true,"domain":"","hasWriteAccess":false,"dasherUser":false,"userName":"guest"};

webspace.page = {"canDeleteWebspace":null,"locale":"en","state":"","wuid":"wuid:gx:ae0de6ac678c489","pageInheritsPermissions":null,"timeZone":"America/Los_Angeles","properties":{},"type":"text","canChangePath":true,"parentWuid":null,"revision":33,"title":"Optimizing Matrix Transposition Using CUDA","isRtlLocale":false,"bidiEnabled":false,"siteLocale":"en","name":"cs525finals","path":"/cs525finals","isSiteRtlLocale":false,"parentPath":null};
webspace.page.breadcrumbs = [{"title":"Optimizing Matrix Transposition Using CUDA","dir":"ltr","path":"/site/rommelbhargava/cs525finals","deleted":false}];


webspace.editorResources = {
  text: [
    'https://ssl.gstatic.com/sites/p/2b5625/system/js/codemirror.js',
    'https://ssl.gstatic.com/sites/p/2b5625/system/app/css/codemirror_css.css',
    'https://ssl.gstatic.com/sites/p/2b5625/system/js/trog_edit__en.js',
    'https://ssl.gstatic.com/sites/p/2b5625/system/app/css/trogedit.css',
    '/site/rommelbhargava/_/rsrc/1340729144000/system/app/css/editor.css',
    'https://ssl.gstatic.com/sites/p/2b5625/system/app/css/codeeditor.css',
    '/site/rommelbhargava/_/rsrc/1340729144000/system/app/css/camelot/editor-jfk.css'
  ],
  sitelayout: [
    'https://ssl.gstatic.com/sites/p/2b5625/system/app/css/sitelayouteditor.css'
  ]
};

var JOT_clearDotPath = 'https://ssl.gstatic.com/sites/p/2b5625/system/app/images/cleardot.gif';


var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];


webspace.siteTemplateId = false;


webspace.page.currentTemplate = {"title":"Web Page","path":"/system/app/pagetemplates/text"};



var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<style type="text/css">
</style>
<link rel="stylesheet" type="text/css" href="https://ssl.gstatic.com/sites/p/2b5625/system/app/themes/vinylpanel/standard-css-vinylpanel-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="/site/rommelbhargava/_/rsrc/1340729144000/system/app/css/overlay.css?cb=vinylpanel150goog-ws-noside" />
<link rel="stylesheet" type="text/css" href="/site/rommelbhargava/_/rsrc/1340729144000/system/app/css/symbolfont.css" />
<link rel="stylesheet" type="text/css" href="/site/rommelbhargava/_/rsrc/1340729144000/system/app/css/camelot/allthemes-view.css" />
<!--[if IE]>
          <link rel="stylesheet" type="text/css" href="/site/rommelbhargava/system/app/css/camelot/allthemes%2die.css" />
        <![endif]-->
<title>Optimizing Matrix Transposition Using CUDA - rommelbhargava</title>
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>
<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en            ">
<script src="//www.gstatic.com/caja/4913/caja.js"> </script>
<script src="https://ssl.gstatic.com/sites/p/2b5625/system/js/jot_caja.js"> </script>
<div id="sites-page-toolbar" class="sites-header-divider">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-status" class="sites-status" style="display:none;"><div id="sites-notice" class="sites-notice" role="status" aria-live="assertive"> </div></div>
</div>
<div id="sites-chrome-everything-scrollbar">
<div id="sites-chrome-everything">
<div id="sites-chrome-page-wrapper" style="direction: ltr">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper" style="">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0" style="">
<tr class="sites-header-primary-row" id="sites-chrome-userheader">
<td id="sites-header-title">
<div class="sites-header-cell-buffer-wrapper">
<h2>
</h2>
</div>
</td>
<td class="sites-layout-searchbox">
<div class="sites-header-cell-buffer-wrapper">
<div>
</div>
</div>
</td>
</tr>
<tr class="sites-header-secondary-row" id="sites-chrome-horizontal-nav">
<td colspan="2" id="sites-chrome-header-horizontal-nav-container">
</td>
</tr>
</table> 
</div> 
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0" cellpadding="{scmCellpadding}" border="0">
<tr>
<td id="sites-canvas-wrapper">
<div id="sites-canvas">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
</div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr">Optimizing Matrix Transposition Using CUDA</span>
</h3>
<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-layout-name-right-sidebar-hf sites-layout-vbox"><div class="sites-layout-tile sites-tile-name-header"><div dir="ltr"><a href="/"></a><span style="border-collapse:collapse"><br /></span><br /></div></div><table cellspacing="0" class="sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr"><div><div><br /></div><div><br /></div><h2><a name="TOC-Introduction"></a>Introduction</h2><div><b><span style="font-weight:normal"><br /></span></b></div><div><b><span style="border-collapse:separate;font-weight:normal"><b><span style="border-collapse:separate;font-weight:normal"><div><b><br /></b></div></span></b></span><span style="border-collapse:separate;font-weight:normal"><b><span style="border-collapse:separate;font-weight:normal"><b><span style="border-collapse:separate;font-weight:normal"><div><b><br /></b></div></span></b></span></b></span><span style="border-collapse:separate;font-weight:normal"><b><span style="border-collapse:separate;font-weight:normal"><b><span style="border-collapse:separate;font-weight:normal"><b><span style="border-collapse:separate;font-weight:normal"><div><b>Matrix Transpose</b></div><div>Transpose of a matrix can be described as converting MxN matrix to NxM, values of rows become values in column.</div></span></b></span></b></span></b></span><span style="border-collapse:collapse"><br /></span><br /></b></div><div><br /></div><div><a href="https://sites.google.com/site/rommelbhargava/cs525finals/Transpose%20matrix.jpg?attredirects=0" imageanchor="1"><img border="0" src="https://sites.google.com/site/rommelbhargava/_/rsrc/1273254805070/cs525finals/Transpose%20matrix.jpg" /></a></div><div><br /></div><div><br /></div><h2><a name="TOC-The-CPU-Solution"></a>The CPU Solution</h2><div><span style="border-collapse:collapse"><b><table border="1" bordercolor="#888" cellspacing="0" style="border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr></tr></tbody></table></b></span><br /><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:739px;height:38px"><b>CPU Solution</b><br /><span style="border-collapse:separate;font-weight:normal">In CPU the problem can be solved simply by writing the following code, by converting (Mx, My) values to (My, Mx) values.<br />We will be using this solution to Compare our results. The reason to do so is, CPU is equipped with </span><span style="border-collapse:separate">ECC </span><span style="border-collapse:separate;font-weight:normal">which makes sure that values generated are correct. and GPU is not :( (well now it is </span><span style="border-collapse:separate">GeForce 480</span><span style="border-collapse:separate;font-weight:normal"> series comes with ECC) but apart from that we can perform mathamatical mistakes. Hence, we must check if the matrix transposition done on GPU is exactly same as CPU. </span></td></tr></tbody></table><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr></tr></tbody></table><br /></div><div><font face="'courier new', monospace"><font face="Arial, sans-serif"><b><br /></b></font></font></div><div><font face="'courier new', monospace"><table border="1" bordercolor="#888" cellspacing="0" style="border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="width:539px;height:176px"><span style="border-collapse:separate;font-family:Arial,sans-serif"><div><div><font face="'courier new', monospace"><b>// transpose matrix *</b></font></div><div><font face="'courier new', monospace"><b>for( int y = 0; y &lt; size_y; ++y) </b></font></div><div><font face="'courier new', monospace"><b>{</b></font></div></div><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><span style="font-style:normal"><font face="'courier new', monospace"><b>for( int x = 0; x &lt; size_x; ++x) </b></font></span></div></div><div><div><span style="font-style:normal"><font face="'courier new', monospace"><b>{</b></font></span></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><span style="font-style:normal"><font face="'courier new', monospace"><b>transpose[(x * size_y) + y] = h_idata[(y * size_x) + x];</b></font></span></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><span style="font-style:normal"><font face="'courier new', monospace"><b>}</b></font></span></div></div></blockquote><div><div><font face="'courier new', monospace"><b>}</b></font></div></div></span></td></tr></tbody></table></font></div></div><div><div><font face="'courier new', monospace">* </font>Although there are various other ways to solve the Transpose problem we will stick to simple one. </div><div><br /></div><div><br /></div><div><br /></div><h2><a name="TOC-Doing-it-the-GPU-way"></a>Doing it the GPU way</h2><div><br /></div><div>GPU can help us performing the transpose in parallel fashion. We will look at how to solve this problem in different ways. We will start from the most obvious way and move to smarter way by analysing the performance measures. fair enough!</div><div><br /></div><div><br /></div><h4><a name="TOC-1"></a><font color="#565555" face="Arial, sans-serif" size="3"><span style="font-size:13px;font-weight:normal;line-height:20px"><font color="#135355" face="'Trebuchet MS', arial, sans-serif" size="4"><span style="font-size:16px;line-height:24px"><b><br /></b></span></font></span></font></h4></div><div><h3><a name="TOC-Device-Query-"></a>Device Query </h3><h4><a name="TOC-Lets-take-a-look-at-the-hardware-we-are-about-to-perform-our-experiment-on."></a><span style="color:rgb(86,85,85);font-family:Arial,sans-serif;font-weight:normal;line-height:20px;font-size:13px">Lets take a look at the hardware we are about to perform our experiment on.</span></h4><div><div style="display:block;text-align:left"><a href="https://sites.google.com/site/rommelbhargava/cs525finals/deviceQry.png?attredirects=0" imageanchor="1"><img border="0" src="https://sites.google.com/site/rommelbhargava/_/rsrc/1273197310558/cs525finals/deviceQry.png" /></a></div></div><div><br /></div><div><br /></div><div>We will take advantage of number of grids and blocks.</div><div><br /></div><div><br /></div><div><div><div>Here is the link how does the GPU arch looks like</div><div><br /></div><div><div style="display:block;text-align:left"><a href="http://www.evl.uic.edu/aej/525/pics/cuda_memory.jpg" imageanchor="1" style="color:rgb(28,135,138);background-color:initial;border-bottom-style:none;border-bottom-width:initial;border-bottom-color:initial;background-repeat:initial initial" rel="nofollow"><img border="0" src="http://www.evl.uic.edu/aej/525/pics/cuda_memory.jpg" style="border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;border-style:initial;border-color:initial" /></a></div></div></div><div><br /></div><div>In the above diagram Shared memory is the fastest memory we can use to perform our calculation in.</div></div><div><br /></div><div><br /></div><div><div><h3><a name="TOC-Naive-Approach-GPU-as-a-Black-Box-"></a>Naive Approach (GPU as a Black Box)</h3><div>Consider GPU as a Black Box in which we enter a Matrix <b>M</b> and get <b>M-Transpose</b> as output. In this case all the cells in the matrix are treated as individual thread tasks. Hence the way we write the code will be:</div><div><br /></div><div>&lt;figure&gt;</div></div><div><div><span style="border-collapse:separate"><div><div><span style="border-collapse:separate"><div><br /></div></span></div></div></span><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:0px;height:277px"><span style="border-collapse:separate"><div><div><span style="border-collapse:separate"><div>/<font face="'courier new', monospace">/Simple Transpose using GPU no optimization.</font></div><div><font face="'courier new', monospace">__global__ void transposeNaive (float *odata, float* idata, int width, int height, int nreps)</font></div><div><font face="'courier new', monospace">{</font></div></span></div></div><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace">int xIndex = blockIdx.x*TILE_DIM + threadIdx.x;</font></div></span></div></div><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace">int yIndex = blockIdx.y*TILE_DIM + threadIdx.y;</font></div></span></div></div><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace"><br /></font></div></span></div></div><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace">int index_in = xIndex + width * yIndex;</font></div></span></div></div><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace">int index_out = yIndex + height * xIndex;</font></div></span></div></div><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace"><br /></font></div></span></div></div><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace">for (int i=0; i&lt;TILE_DIM; i+=BLOCK_ROWS) </font></div></span></div></div><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace">{</font></div></span></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace">odata[index_out+i] = idata[index_in+i*width];</font></div></span></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace">}//for</font></div></span></div></div></blockquote><div><div><span style="border-collapse:separate"><div><font face="'courier new', monospace">}//Naive</font></div></span></div></div></span></td></tr></tbody></table><br /></div><div>The kernel shown above takes float*<b> odata</b><i>(output Matrix)</i> and <b>idata</b><i>(input Matrix)</i>. And computes the current input location(index_in) and corrosponding output location (index_out) for each and every thread. Now since this task is performed for each and every cell, it takes fairly less time to calculate the transpose.</div><div>...But GPU is not a Black Box, there is a process we can exploit further.</div><div><br /></div><div><br /></div></div></div><h3><a name="TOC-Using-the-Shared-Memory"></a>Using the Shared Memory</h3><div>As seen in the architecture we have faster ways of accessing data "Shared memory". </div><div>Shared memory speeds up the processing to a fair amount. and even more if we use it in a smarter way. But here is the deal, shared memory is limited in size, and distributed in blocks. in our case 16KB.</div><div>So the trick is to divide the large data in to small TILES which can be fitted in shared memory.</div><div><br /></div><div><font face="'courier new', monospace"><font face="Arial, sans-serif"><br /></font></font></div><div><table border="1" bordercolor="#888" cellspacing="0" style="border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="width:840px;height:578px"><span style="border-collapse:separate"><div><div><font face="'courier new', monospace">//Coalesced Transpose:</font></div><div><font face="'courier new', monospace">//Takes advantage of shared memory transfers a block of data </font></div><div><font face="'courier new', monospace">//to shared memory, transpose and copies to out</font></div><div><font face="'courier new', monospace">__global__ void transposeCoalesced(float *odata, float *idata, int width, int height, int nreps)</font></div><div><font face="'courier new', monospace">{</font></div></div><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">__shared__ float tile[TILE_DIM][TILE_DIM];</font></div></div><div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace">int xIndex = blockIdx.x*TILE_DIM + threadIdx.x;</font></div></div><div><div><font face="'courier new', monospace">int yIndex = blockIdx.y*TILE_DIM + threadIdx.y;</font></div></div><div><div><font face="'courier new', monospace">int index_in = xIndex + (yIndex)*width;</font></div></div><div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace">xIndex = blockIdx.y * TILE_DIM + threadIdx.x;</font></div></div><div><div><font face="'courier new', monospace">yIndex = blockIdx.x * TILE_DIM + threadIdx.y;</font></div></div><div><div><font face="'courier new', monospace">int index_out = xIndex + (yIndex)*height;</font></div></div><div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace">for (int r=0; r &lt; nreps; r++) </font></div></div><div><div><font face="'courier new', monospace">{</font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">for (int i=0; i&lt;TILE_DIM; i+=BLOCK_ROWS) </font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">{</font></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">tile[threadIdx.y+i][threadIdx.x] = idata[index_in+i*width];</font></div></div></blockquote></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">}</font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">__syncthreads();</font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">for (int i=0; i&lt;TILE_DIM; i+=BLOCK_ROWS) </font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">{</font></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">odata[index_out+i*height] =<span style="white-space:pre"> </span></font><font face="'courier new', monospace">tile[threadIdx.x][threadIdx.y+i];</font></div></div></blockquote></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">}//for</font></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">}//for</font></div></div></blockquote><div><div><font face="'courier new', monospace">}//transpose</font></div></div></span></td></tr></tbody></table><br /></div><div><br /></div><div><br /></div><div><table border="1" bordercolor="#888" cellspacing="0" style="border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="width:60px;height:19px"> </td><td style="width:121px;height:19px"> Loop Over GB/s</td><td style="width:120px;height:19px">Loop Within GB/s </td><td style="width:124px;height:19px">Loop Over Time </td><td style="width:114px;height:19px">Loop Within Time </td></tr><tr><td style="width:60px;height:19px"> Naive</td><td style="width:121px;height:19px">3.18 </td><td style="width:120px;height:19px">1.58<span>    <span>    </span></span></td><td style="width:124px;height:19px"> 0.00959</td><td style="width:114px;height:19px">0.01933 </td></tr><tr><td style="width:60px;height:19px">Coalesced </td><td style="width:121px;height:19px">7.3 </td><td style="width:120px;height:19px">1.82 </td><td style="width:124px;height:19px">0.00418 </td><td style="width:114px;height:19px">0.01676 </td></tr></tbody></table><br /></div><div><br /></div><div><br /></div></div><div><div>Before we move further we must take care of Bank Conflicts</div><div><b><span style="font-weight:normal"><br /></span></b></div><div><table border="1" bordercolor="#888" cellspacing="0" style="border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="width:778px;height:58px"><span style="border-collapse:separate"><div><b>Bank Conflict</b></div><div>If the thread tries to access the same Memory Bank in the Block then the process becomes serialize and drops the performance.</div></span></td></tr></tbody></table></div><div><b><span style="font-weight:normal"><br /></span></b></div><div>here is a simple way to handle that.</div><div><br /></div><div><font face="'courier new', monospace">__shared__ float tile[TILE_DIM][TILE_DIM];</font></div><div><br /></div><div>to </div><div><font face="'courier new', monospace">__shared__ float tile[TILE_DIM][TILE_DIM+1]; </font></div><div><br /></div><div><br /></div><div><br /></div><div><div><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:220px;height:19px"> </td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:115px;height:19px"> Loop Over GB/s</td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:114px;height:19px">Loop Within GB/s </td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:118px;height:19px">Loop Over Time </td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:108px;height:19px">Loop Within Time </td></tr><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:220px;height:19px"> Naive</td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:115px;height:19px">3.18 </td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:114px;height:19px">1.58<span>    <span>    </span></span></td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:118px;height:19px"> 0.00959</td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:108px;height:19px">0.01933 </td></tr><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:220px;height:19px">Coalesced</td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:115px;height:19px">7.3 </td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:114px;height:19px">1.82 </td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:118px;height:19px">0.00418 </td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:108px;height:19px">0.01676 </td></tr><tr><td style="width:220px;height:19px"> Coalesced No Bank</td><td style="width:115px;height:19px">9,98</td><td style="width:114px;height:19px">2.02 </td><td style="width:118px;height:19px">0.00306 </td><td style="width:108px;height:19px">0.0151 </td></tr></tbody></table></div></div><div><br /><br /><br /></div><h3><a name="TOC-Where-is-the-performance-Drop-"></a>Where is the performance Drop?</h3><div><br /></div><div>Lets break down this and observe. there are 2 major areas were we can look for issues:</div><div><br /></div><div><b>- Shared memory size </b></div><div><b>- Global access pattern of data</b></div><div>Hence we divide the approach in 2 parts to find where is the latency problem</div><div><br /></div><div><br /></div><div>First we will try to see if the performance drop is happening in the Shared Memory. For this purpose we write a simple code that just performes the transformation in shared memory and does not performs transformation in actual tile.</div><div><br /></div><h4><a name="TOC-Fine-Grained"></a>Fine Grained</h4><div><font face="'courier new', monospace"><span style="border-collapse:separate;font-family:Arial,sans-serif"><div><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif">Meaning we will transpose inside the tiles but not move the tiles.</span></font></div></div></span><span style="border-collapse:separate;font-family:Arial,sans-serif"><div><div><font face="'courier new', monospace"><br /></font></div></div></span><table border="1" bordercolor="#888" cellspacing="0" style="border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="width:907px;height:455px"><span style="border-collapse:separate;font-family:Arial,sans-serif"><div><div><font face="'courier new', monospace">__global__ void transposeFineGrained(float *odata, float *idata, int width, int height, int nreps)</font></div><div><font face="'courier new', monospace">{</font></div></div><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">__shared__ float block[TILE_DIM][TILE_DIM+1];</font></div></div><div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace">int xIndex = blockIdx.x * TILE_DIM + threadIdx.x;</font></div></div><div><div><font face="'courier new', monospace">int yIndex = blockIdx.y * TILE_DIM + threadIdx.y;</font></div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace">int index = xIndex + (yIndex)*width;</font></div></div><div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace">for (int r=0; r&lt;nreps; r++) </font></div></div><div><div><font face="'courier new', monospace">{</font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">for (int i=0; i &lt; TILE_DIM; i += BLOCK_ROWS) </font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">{</font></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">block[threadIdx.y+i][threadIdx.x] =</font></div></div></blockquote></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">}</font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">__syncthreads();</font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">for (int i=0; i &lt; TILE_DIM; i += BLOCK_ROWS) </font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">{</font></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">odata[index+i*height] =</font><span style="white-space:pre"><font face="'courier new', monospace"> </font></span><font face="'courier new', monospace">block[threadIdx.x][threadIdx.y+i];</font></div></div></blockquote></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">}</font></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">}</font></div></div></blockquote><div><div><font face="'courier new', monospace">}</font></div></div></span></td></tr></tbody></table></font></div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><br /></div><h4><a name="TOC-Coarsed"></a>Coarsed</h4><div><font face="'courier new', monospace"><font face="Arial, sans-serif">Means we will not transpose inside the tiles but just move the tiles.</font></font></div></div><div><div><span style="border-collapse:separate"><div><div><font face="'courier new', monospace"><br /></font></div><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif"><div><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:862px;height:538px"><span style="border-collapse:separate"><div><b><span style="font-weight:normal"><div><div><font face="'courier new', monospace">__global__ void transposeCoarseGrained(float *odata, float *idata, int width, int height, int nreps)</font></div><div><font face="'courier new', monospace">{</font></div></div><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">__shared__ float block[TILE_DIM][TILE_DIM+1];</font></div></div><div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace">int xIndex = blockIdx.x * TILE_DIM + threadIdx.x;</font></div></div><div><div><font face="'courier new', monospace">int yIndex = blockIdx.y * TILE_DIM + threadIdx.y;</font></div></div><div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace">int index_in = xIndex + (yIndex)*width;</font></div></div><div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace">xIndex = blockIdx.y * TILE_DIM + threadIdx.x;</font></div></div><div><div><font face="'courier new', monospace">yIndex = blockIdx.x * TILE_DIM + threadIdx.y;</font></div></div><div><div><font face="'courier new', monospace">int index_out = xIndex + (yIndex)*height;</font></div></div><div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace">for (int r=0; r&lt;nreps; r++) </font></div></div><div><div><font face="'courier new', monospace">{</font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">for (int i=0; i&lt;TILE_DIM; i += BLOCK_ROWS) </font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">{</font></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">block[threadIdx.y+i][threadIdx.x] =</font></div></div></blockquote></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">}</font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">__syncthreads();</font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">for (int i=0; i&lt;TILE_DIM; i += BLOCK_ROWS) </font></div></div></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">{</font></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">odata[index_out+i*height] =</font></div></div></blockquote></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">}</font></div></div></blockquote></blockquote><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">}</font></div></div></blockquote><div><div><font face="'courier new', monospace">}</font></div></div></span></b></div></span></td></tr></tbody></table></div></span></font></div></div></span><span style="border-collapse:separate"><div><div><font face="'courier new', monospace"><br /></font></div></div><div><div><font face="'courier new', monospace"><br /></font></div></div></span></div><div><br /></div><div><table border="1" bordercolor="#888" cellspacing="0" style="border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="width:134px;height:19px"> </td><td style="width:133px;height:19px">Loop Over  GB/s </td><td style="width:148px;height:19px">Loop Within GB/s </td><td style="width:125px;height:19px">Loop Over Time </td><td style="width:157px;height:19px">Loop Within Time </td></tr><tr><td style="width:134px;height:19px"> Coarse Grained</td><td style="width:133px;height:19px"> 0.39</td><td style="width:148px;height:19px">0.67 </td><td style="width:125px;height:19px">0.00294 </td><td style="width:157px;height:19px">0.04565 </td></tr><tr><td style="width:134px;height:19px"> Fine Grained</td><td style="width:133px;height:19px">0.64 </td><td style="width:148px;height:19px">2.24 </td><td style="width:125px;height:19px">0.00287 </td><td style="width:157px;height:19px">0.01361 </td></tr></tbody></table><br /></div><div><br /></div><div>Fine Grained: Looks Good! After all we used shared memory. Right! ;)</div><div><br /></div><div>Coarsed on the other hand, has a high latency which implies that the problem is with global access pattern. This problem is also solved on non-GPU approaches. by accessing memory in certain fashion.</div><div><br /></div><div><br /></div><div><br /></div><h4><a name="TOC-Partition-Camping"></a>Partition Camping</h4><div><span style="border-collapse:separate"><div><font face="'courier new', monospace"><br /></font></div><div><font face="'courier new', monospace"><br /></font></div><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif"><div><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:476px;height:139px"><span style="border-collapse:separate"><div><font face="'courier new', monospace">int bid = blockIdx.x + gridDim.x*blockIdx.y;</font></div><div><font face="'courier new', monospace">blockIdx_y = bid%gridDim.y;</font></div><div><font face="'courier new', monospace">blockIdx_x = ((bid/gridDim.y)+blockIdx_y)%gridDim.x;</font></div><div><font face="'courier new', monospace"><br /></font></div><div><font face="'courier new', monospace">int xIndex = blockIdx_x*TILE_DIM + threadIdx.x;</font></div><div><span style="font-family:courier new,monospace">int yIndex = blockIdx_y*TILE_DIM + threadIdx.y;</span></div><div><br /></div></span></td></tr></tbody></table></div></span></font></div><div><font face="'courier new', monospace"><br /></font></div></span><span style="border-collapse:collapse"><br /></span></div><h4><a name="TOC-Diagonal"></a>Diagonal</h4></div><div><div><span style="border-collapse:separate"><div><div><font face="'courier new', monospace"><br /></font></div><div><font face="'courier new', monospace"><br /></font></div><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif"><div><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:566px;height:239px"><span style="border-collapse:separate"><div><b><span style="font-weight:normal"><div><div><font face="'courier new', monospace">// diagonal reordering</font></div><div><font face="'courier new', monospace">if (width == height) </font></div><div><font face="'courier new', monospace">{</font></div></div><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">blockIdx_y = blockIdx.x;</font></div></div><div><div><font face="'courier new', monospace">blockIdx_x = (blockIdx.x+blockIdx.y)%gridDim.x;</font></div></div></blockquote><div><div><font face="'courier new', monospace">} </font></div><div><font face="'courier new', monospace">else </font></div><div><font face="'courier new', monospace">{</font></div></div><blockquote style="font-style:italic;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:40px;border-top-style:none;border-right-style:none;border-bottom-style:none;border-left-style:none;border-width:initial;border-color:initial;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px"><div><div><font face="'courier new', monospace">int bid = blockIdx.x + gridDim.x*blockIdx.y;</font></div></div><div><div><font face="'courier new', monospace">blockIdx_y = bid%gridDim.y;</font></div></div><div><div><font face="'courier new', monospace">blockIdx_x = ((bid/gridDim.y)+blockIdx_y)%gridDim.x;</font></div></div></blockquote><div><div><font face="'courier new', monospace">}</font></div></div></span></b></div></span></td></tr></tbody></table></div></span></font></div><div><div><font face="'courier new', monospace"><div><font face="'courier new', monospace"><br /></font></div></font><font face="'courier new', monospace"><br /></font><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif"><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="width:72px;height:19px"> </td><td style="width:237px;height:19px"> Loop Over GB/s</td><td style="width:193px;height:19px">Loop Within GB/s </td><td style="width:181px;height:19px">Loop Over Time </td><td style="width:166px;height:19px">Loop Within Time </td></tr><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:72px;height:19px"> Diagonal</td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:237px;height:19px"> 0.99</td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:193px;height:19px">1.48 </td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:181px;height:19px">0.00278 </td><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:166px;height:19px">0.02057 </td></tr></tbody></table><br /></span><font face="Arial, sans-serif"><br /></font><br /></font></div></div></div><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif"><h3 style="font-family:Trebuchet MS,arial,sans-serif;color:rgb(119,145,83);font-size:1.4em;font-weight:normal;background-color:initial;padding-bottom:5px;background-repeat:repeat no-repeat"><a name="TOC-Observations-"></a>Observations </h3><div>Following is the graph for 64x64 grid matrix the results are pretty much what were expected.</div><div><br /></div><div><div style="display:block;text-align:left"><a href="https://sites.google.com/site/rommelbhargava/cs525finals/16X16_64_64.png?attredirects=0" imageanchor="1"><img border="0" src="https://sites.google.com/site/rommelbhargava/_/rsrc/1273254824707/cs525finals/16X16_64_64.png" /></a></div><br /></div><div><br /></div><div><div style="display:block;text-align:left"><a href="https://sites.google.com/site/rommelbhargava/cs525finals/graph64x64.png?attredirects=0" imageanchor="1"><img border="0" src="https://sites.google.com/site/rommelbhargava/_/rsrc/1273242193722/cs525finals/graph64x64.png" /></a></div><br /></div><div><br /></div><div><div style="margin-top:5px;margin-bottom:0px;display:block;margin-right:auto;text-align:left"><a href="https://sites.google.com/site/rommelbhargava/cs525finals/graph16x16.png?attredirects=0" imageanchor="1"><img border="0" src="https://sites.google.com/site/rommelbhargava/_/rsrc/1273242369080/cs525finals/graph16x16.png" /></a></div><br /></div><div><br /></div><div><a href="https://sites.google.com/site/rommelbhargava/cs525finals/output.txt?attredirects=0">output.txt</a></div><div><a href="https://sites.google.com/site/rommelbhargava/cs525finals/output.xlsx?attredirects=0">output.xlsx</a></div><div><br /></div><div><br /></div></span></font></div></div></span></div><h3><a name="TOC-Conclusion"></a>Conclusion</h3><div>The above approach shows a step by step way to optimize Matrix Transpose on CUDA, taking advantage of hardware architecture. We saw how shared memory boosetd the naive approcah timing. and further saw that how partition Camping helps gain performance.</div><div><br /></div><div>The current code can be deployed on other hardware with minor changes.</div><div><br /></div><div><br /></div><h3><a name="TOC-Changes-In-new-solution"></a>Changes In new solution</h3><h4><a name="TOC-Flexible-Shared-memory"></a>Flexible Shared memory</h4><div><span style="color:rgb(137,169,170)">http://www.cs.cornell.edu/~bindel/class/cs5220-s10/slides/lec26.pdf</span></div><div><br /></div><div><div>Size known at compile time</div><div><font face="'courier new', monospace"><br /></font></div><div><br /></div><div><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif"><div><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:265px;height:138px"><span style="border-collapse:separate"><div><b><span style="font-weight:normal"><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif"><div><font face="'courier new', monospace">__global__ void kernel(...)</font></div><div><font face="'courier new', monospace">{</font></div><div><font face="'courier new', monospace">__shared__ float x[256];</font></div><div><font face="'courier new', monospace">...</font></div><div><font face="'courier new', monospace">}</font></div><div><font face="'courier new', monospace">kernel&lt;&lt;&lt;nb,bs&gt;&gt;&gt;(...);</font></div></span></font></div></span></b></div></span></td></tr></tbody></table></div></span></font></div></div><div><br /></div><div>Size known at kernel launch</div><div><font face="'courier new', monospace"><br /></font></div></div><div><br /></div><div><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif"><div><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:265px;height:147px"><span style="border-collapse:separate"><div><b><span style="font-weight:normal"><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif"><div><font face="'courier new', monospace">__global__ void kernel(...)</font></div><div><font face="'courier new', monospace">{</font></div><div><font face="'courier new', monospace">extern __shared__ float x[];</font></div><div><font face="'courier new', monospace">...</font></div><div><font face="'courier new', monospace">}</font></div><div><font face="'courier new', monospace">kernel&lt;&lt;&lt;nb,bs,bytes&gt;&gt;&gt;(...);</font></div></span></font></div></span></b></div></span></td></tr></tbody></table></div></span></font></div></div><div><br /></div><h4><a name="TOC-Flexible-Matrix"></a>Flexible Matrix</h4><div>We will need extra grid if 32 is 33</div><div><font face="'courier new', monospace"><br /></font></div><div><font face="'courier new', monospace"><span style="font-family:Arial,sans-serif"><div><table border="1" bordercolor="#888" cellspacing="0" style="margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;border-collapse:collapse;border-top-color:rgb(136,136,136);border-right-color:rgb(136,136,136);border-bottom-color:rgb(136,136,136);border-left-color:rgb(136,136,136);border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-width:1px"><tbody><tr><td style="vertical-align:top;padding-top:1px;padding-right:4px;padding-bottom:1px;padding-left:4px;width:896px;height:19px"><span style="border-collapse:separate"><div><b><span style="font-weight:normal"><div><font face="'courier new', monospace">dim3 grid((size_x + (TILE_DIM-(size_x%TILE_DIM)))/TILE_DIM, (size_y + (TILE_DIM-(size_y%TILE_DIM)))/TILE_DIM)</font></div></span></b></div></span></td></tr></tbody></table></div></span></font></div><div><font face="'courier new', monospace"><br /></font></div><div><font face="'courier new', monospace"><br /></font></div><div><br /></div><h3><a name="TOC-Lessons-and-Tips"></a>Lessons and Tips</h3><div>Here are couple of things we must remember while programming in CUDA.</div><div><br /></div><div>Don't access memory often, if possible try access coalesced memory. </div><div><div>Registers are fastest use them as much. Avoid storing arrays in Registers.</div><div>Small kernels have better performance. Break down kernel in to smaller parts, this way one can utilize registers to the best.</div><div>Use texture memory if data is to be just read. Texture memory is cached.</div><div>Avoid, uncertain / low performance threads with high performing threads. Like loop with random numbers.</div><div>Don't forget CUDA has some low accuracy fast math function.</div><div>Avoid lookup tables for obvious calculations.</div><div>Avoid multiple threads accessing the same memory. CUDA automatically make those routines as Atomic.</div><div>Remember Bank Conflicts when ever dealing with Shared Memory</div><div>Play around with BLOCK SIZE and THREADS to find optimal performance. Automate them.</div><div>Use Buckets if far values have negligible effect. (This goes for N-Body).</div></div></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div></div></td><td class="sites-layout-tile sites-tile-name-content-2 sites-canvas-sidebar sites-layout-empty-tile"><div dir="ltr"><br /></div></td></tr></tbody></table><div class="sites-layout-tile sites-tile-name-footer sites-layout-empty-tile"><div dir="ltr"><br /></div></div></div>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-attachments">
<div class="sites-attachments-row"><div class="sites-attachments-icon" style="left:0px;"><div class="sites-translucent sites-symbol">Č</div></div></div><div class="sites-attachments-separator"></div>
<div id="attachment-wuid:gx:333543ee6fb145cd"><div class="sites-attachments-row"><div class="sites-attachments-icon" style="left:0px"><div class="sites-translucent sites-symbol">ċ</div></div><a href="/site/rommelbhargava/cs525finals/MatTrans.7z?attredirects=0&amp;d=1" title="Download"><div id="attachment-download-wuid:gx:333543ee6fb145cd" class="sites-attachments-icon" style="right:0px"><span class="sites-symbol">ď</span></div></a><div class="sites-attachments-version"><a href="/site/rommelbhargava/system/app/pages/admin/revisions?wuid=wuid:gx:333543ee6fb145cd">v.1</a></div><div class="sites-attachments-inner-div"><div class="sites-attachments-name">MatTrans.7z <div class="sites-translucent">(4k)</div></div><div class="sites-attachments-author">Rommel Bhargava, <div class="sites-translucent">May 7, 2010 8:00 AM</div></div></div></div><div class="sites-attachments-separator"></div></div>
<div id="attachment-wuid:gx:62a566bf0a90c5ed"><div class="sites-attachments-row"><div class="sites-attachments-icon" style="left:0px"><div class="sites-translucent sites-symbol">ċ</div></div><a href="/site/rommelbhargava/cs525finals/output.txt?attredirects=0&amp;d=1" title="Download"><div id="attachment-download-wuid:gx:62a566bf0a90c5ed" class="sites-attachments-icon" style="right:0px"><span class="sites-symbol">ď</span></div></a><div class="sites-attachments-version"><a href="/site/rommelbhargava/system/app/pages/admin/revisions?wuid=wuid:gx:62a566bf0a90c5ed">v.1</a></div><div class="sites-attachments-inner-div"><div class="sites-attachments-name">output.txt <div class="sites-translucent">(13k)</div></div><div class="sites-attachments-author">Rommel Bhargava, <div class="sites-translucent">May 6, 2010 9:38 PM</div></div></div></div><div class="sites-attachments-separator"></div></div>
<div id="attachment-wuid:gx:342f4d98adddad24"><div class="sites-attachments-row"><div class="sites-attachments-icon" style="left:0px"><span class="sites-symbol sites-color-ms-excel">Ĉ</span></div><a href="/site/rommelbhargava/cs525finals/output.xlsx?attredirects=0&amp;d=1" title="Download"><div id="attachment-download-wuid:gx:342f4d98adddad24" class="sites-attachments-icon" style="right:0px"><span class="sites-symbol">ď</span></div></a><div class="sites-attachments-version"><a href="/site/rommelbhargava/system/app/pages/admin/revisions?wuid=wuid:gx:342f4d98adddad24">v.1</a></div><div class="sites-attachments-inner-div"><div class="sites-attachments-name"><a href="https://docs.google.com/viewer?a=v&amp;pid=sites&amp;srcid=ZGVmYXVsdGRvbWFpbnxyb21tZWxiaGFyZ2F2YXxneDozNDJmNGQ5OGFkZGRhZDI0">output.xlsx</a> <div class="sites-translucent">(25k)</div></div><div class="sites-attachments-author">Rommel Bhargava, <div class="sites-translucent">May 6, 2010 11:05 PM</div></div></div></div><div class="sites-attachments-separator"></div></div>
<div style="height: 10px"></div>
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments" style="display:none;" class="sites-canvas-bottom-no-items">
<div id="sites-comment-wrapper" class="sites-canvas-bottom-panel-wrapper">
<div>
<h3 id="sites-comment-header">
<strong>Comments</strong>
</h3>
</div>
<div id="sites-comment-inner" class="sites-comment-inner">
<div jotId="comments" class="sites-comments">
<div id="_wuid_" jotId="template" class="sites-comment" style="display:none">
<div><strong>_displayNameOrEmail_</strong> - _time_ - <a href="javascript:;" onClick="JOT_postEvent('removeComment', this, {wuid:'_wuid_'});">Remove</a></div>
<p dir="_dir_">_text_</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
</div>
</div>
</div>
</div> 
</div> 
<div id="sites-chrome-adminfooter-container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-adminfooter"><p><a class="sites-system-link" href="https://www.google.com/a/UniversalLogin?service=jotspot&amp;continue=https://sites.google.com/site/rommelbhargava/cs525finals">Sign in</a>|<a class="sites-system-link" href="/site/rommelbhargava/system/app/pages/reportAbuse" target="_blank">Report Abuse</a>|<a class="sites-system-link" href="javascript:;" onclick="window.open(webspace.printUrl)">Print Page</a>|<a class="sites-system-link" href="/site/rommelbhargava/system/app/pages/removeAccess" target="_blank">Remove Access</a>|<span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://sites.google.com">Google Sites</a></b></p></div>
</div>
</div> 
</div> 
<div id="sites-chrome-onebar-footer">
</div>

<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" src="https://ssl.gstatic.com/sites/p/2b5625/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
      gsites.HoverPopupMenu.createSiteDropdownMenus('sites-header-nav-dropdown', false);
    </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
              new sites.CommentPane('//docs.google.com/comments/d/AAHRpnXtASf_M2E6cjJ9Hgufts3RfoT7roJm0SgIS66V3B5kvOAUm_ZHpIlzqIij8gspKwQjVPOqmpz7oyKAQbIEdzo2DQXIl5USSC_xH5u3ZQfw7az3WBskti-40HpERiAcwcCDHzlu8/api/js?anon=true', false, false,
                  false, false);
            </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
  setTimeout(function() {
    var fingerprint = gsites.date.TimeZone.getFingerprint([]);
    gsites.Xhr.send('https://sites.google.com/site/rommelbhargava/_/tz', null, null, 'GET', null, null, { afjstz: fingerprint });
  }, 500);
</script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      if (false) {
                        JOT_setMobilePreview();
                      }
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type;
                      window.jstiming.report(loadTimer, {}, 'https://gg.google.com/csi');
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    var maestroRunner = new gsites.pages.view.SitesMaestroRunner(
        webspace, "en");
    maestroRunner.initListeners();
    maestroRunner.installEditRender();
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }

    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();
 //]]>
</script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    JOT_postEvent('decorateGvizCharts');
  </script>

<script type="text/javascript">
              sites.util.Plus.go('sites-chrome-main');
            </script>
<div id="server-timer-div" style="display:none"> </div>
<script>
          window.jstiming.load.tick('render');
        </script>
</body>
</html>
